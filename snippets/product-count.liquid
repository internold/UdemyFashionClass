<input type="hidden" id="stock_left_num" class="stock_left_num" value="10" />
<div id="progress_bar1" class="progress-container items-count">
  <p>
    <span id="counter_left" class="count" style="color: #a94442; border-radius: 5px; background-color: #ffffff;">{{ section.settings.stock_bar_count }}</span>
  </p>
</div>
<div id="progressBar" class="progress progress-striped active progress-bar-success {{ tg }}">
  <div class="progress-bar progress-bar-success" style="padding: 0px 6px;width: 100%;font-size: 0px;"></div>
</div>
<div id="progressBar_back" class="progress progress-striped active {{ tg }}">
  <div class="progressBar_back progress-bar progress-bar-success" style="width: 100%;"></div>
</div>

<!--prouct-count-->

<script>

  /**
* Remaining Items Bar
*/
  function randomIntFromInterval(min,max)
  {
    return Math.floor(Math.random()*(max-min+1)+min);
  }

  var total_items = 50;
  var d = new Date();
  var ran = randomIntFromInterval(12,14);
  //console.log(ran);
  var decrease_after = 1.7;	//in minutes
  //var qtysold = $("#qtysold").html();
  var decrease_after_first_item = 0.17; //in minutes
  var min_of_remaining_items = 1;
  var remaining_items = randomIntFromInterval(12,15);

  (function( $ ) {

    $.fn.progressbar = function() {
      var progress_bar_html = "<p>Hurry! Only <span class='count'>" + remaining_items + "</span> left in stock.</p>" + "<div class='progressbar'><div style='width:100%'></div></div>";

      this.addClass('items-count');
      this.html(progress_bar_html + this.html());

      updateMeter(this);
      var ths = this;

      setTimeout(function(){
        remaining_items--;
        if(remaining_items < min_of_remaining_items ){
          remaining_items = randomIntFromInterval(12,15);
        }
        $('.count').css('background-color', '#E04848');
        $('.count').css('color', '#fff');
        $('.count').css('border-radius','5px');

        setTimeout(function(){
          $('.count').css('background-color', '#fff');
          $('.count').css('color', '#A94442');
        },1000 * 60 * 0.03);

        ths.find(".count").text(remaining_items);
        updateMeter(ths);
      }, 1000 * 60 * decrease_after_first_item);

      setInterval(function(){
        remaining_items--;
        if(remaining_items < min_of_remaining_items ){
          remaining_items = randomIntFromInterval(12,15);
        }
        $('.count').css('background-color', '#E04848');
        $('.count').css('color', '#fff');
        $('.count').css('border-radius','5px');

        setTimeout(function(){
          $('.count').css('background-color', '#fff');
          $('.count').css('color', '#A94442');
        },1000 * 60 * 0.03);

        ths.find(".count").text(remaining_items);
        updateMeter(ths);
      }, 1000 * 60 * decrease_after);        
    };

    function updateMeter(ths){
      var progress = 100*remaining_items/total_items;
      if(remaining_items < 10) {
        ths.find('.progressbar div:first').addClass('less-than-ten');
      }
      ths.find('.progressbar').addClass('active progress-striped');
      setTimeout(function(){

        myanimate(ths.find('.progressbar div:first'), progress);
        ths.find('.progressbar').removeClass('active progress-striped');
      },1000);
    }	
  }( jQuery ));


  function myanimate(elem, total_width) {

    var width = 0;
    var max_width = parseInt(elem.closest('.progressbar').css('width'));
    var elem_current_width = Math.floor(100*parseInt(elem.css('width'))/max_width);
    if(elem_current_width > total_width) {
      width = elem_current_width;
    }
    //console.log("max_width = " + max_width);
    //console.log("elem_current_width = " + elem_current_width);
    function frame() {
      if(elem_current_width > total_width) {
        width--;  // update parameters 
      } else {
        width++;  // update parameters 
      }

      //console.log("width = " + width);
      elem.css('width', width + '%'); // show frame 

      if (width == total_width || width <= 0 || width >= 100)  // check finish condition
        clearInterval(id);
    }

    var id = setInterval(frame, 40); // draw every 10ms
  }
  /**
 * downCount: Simple Countdown clock with offset
 * Author: Sonny T. <hi@sonnyt.com>, sonnyt.com
 */

  (function ($) {

    $.fn.downCount = function (options, callback) {
      var settings = $.extend({
        date: null,
        offset: null
      }, options);

      // Throw error if date is not set
      if (!settings.date) {
        $.error('Date is not defined.');
      }

      // Throw error if date is set incorectly
      if (!Date.parse(settings.date)) {
        $.error('Incorrect date format, it should look like this, 12/24/2012 12:00:00.');
      }

      // Save container
      var container = this;

      /**
         * Change client's local date to match offset timezone
         * @return {Object} Fixed Date object.
         */
      var currentDate = function () {
        // get client's current date
        var date = new Date();

        // turn date to utc
        var utc = date.getTime() + (date.getTimezoneOffset() * 60000);

        // set new Date object
        var new_date = new Date(utc + (3600000*settings.offset))

        return new_date;
      };

      /**
         * Main downCount function that calculates everything
         */
      function countdown () {
        var target_date = new Date(settings.date), // set target date
            current_date = currentDate(); // get fixed current date
        // difference of dates
        var difference = target_date - current_date;
        // if difference is negative than it's pass the target date
        if (difference < 0) {
          // stop timer
          clearInterval(interval);
          if (callback && typeof callback === 'function') callback();
          return;
        }
        // basic math variables
        var _second = 1000,
            _minute = _second * 60,
            _hour = _minute * 60,
            _day = _hour * 24;

        // calculate dates
        var days = Math.floor(difference / _day),
            hours = Math.floor((difference % _day) / _hour),
            minutes = Math.floor((difference % _hour) / _minute),
            seconds = Math.floor((difference % _minute) / _second);

        // fix dates so that it will show two digets
        days = (String(days).length >= 2) ? days : '0' + days;
        hours = (String(hours).length >= 2) ? hours : '0' + hours;
        minutes = (String(minutes).length >= 2) ? minutes : '0' + minutes;
        seconds = (String(seconds).length >= 2) ? seconds : '0' + seconds;

        // based on the date change the refrence wording
        var ref_days = (days === 1) ? 'day' : 'days',
            ref_hours = (hours === 1) ? 'hour' : 'hours',
            ref_minutes = (minutes === 1) ? 'minute' : 'minutes',
            ref_seconds = (seconds === 1) ? 'second' : 'seconds';

        // set to DOM
        container.find('.days').text(days);
        container.find('.hours').text(hours);
        container.find('.minutes').text(minutes);
        container.find('.seconds').text(seconds);

        container.find('.days_ref').text(ref_days);
        container.find('.hours_ref').text(ref_hours);
        container.find('.minutes_ref').text(ref_minutes);
        container.find('.seconds_ref').text(ref_seconds);

        if(days == 0 && hours == 0 && minutes == 0 && seconds == 0 ) {
          // alert("true");
          var totalcount = true;
          $(".btn.add-to-cart.float-left").addClass("add_disbale");
          $(".others-bottom1").addClass("add_enable");
        }          
      };       
      // start
      var interval = setInterval(countdown, 1000);
    };

  })(jQuery);
</script>

<!-- enable random number-->
<script>
  // for stock left number
  var myLeftnum = ['3','4', '5', '6', '7', '8','9','10','11','12'];    
  var randLeftnum = Math.floor(Math.random() * myLeftnum.length);
  var currentLeftnum = myLeftnum[randLeftnum];
  document.getElementById("stock_left_num").value = currentLeftnum;
  document.getElementById("counter_left").innerHTML = currentLeftnum;
  //alert(currentLeftnum);
</script>
<!--
for script only  cookies based invetory left number
-->

<script type="text/javascript">
  setTimeout(function() {
    var second_db=$(".timer_time").val()-4;
    var left_number=$(".stock_left_num").val();
    var counter_number=second_db/left_number;
    var counter_number_sec=counter_number*1000;
    var stop = 1;
    function decrease(){
      var percent = Number($('#counter_left').text());
      if(percent > stop){
        $('#counter_left').text(--percent);
        var t = setTimeout(decrease,counter_number_sec);
      } else{
        $('#counter_left').text(1);
      }
    }
    setTimeout(decrease,counter_number_sec); // mini seconds
    function progress(timeleft, timetotal, $element) {
      var progressBarWidth = timeleft * $element.width() / timetotal;
      $element.find('div').animate({ width: progressBarWidth }, 500).html(timeleft);
      if(timeleft > counter_number) {
        setTimeout(function() {
          progress(timeleft - counter_number, timetotal, $element);
        }, counter_number_sec);
      }
    };
    progress(second_db, second_db, $('#progressBar'));
    $("#progressBar").removeClass("progress-bar-success");

  }, 2000);
</script>

<script type="text/javascript">
  $(".progressBar_back").animate({
    width: 137.5
  }, 1000);
</script>